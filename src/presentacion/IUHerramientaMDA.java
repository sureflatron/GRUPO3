/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;

import gestionXMI.GestorXMI;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import metaModeloSwing.Formulario;
import metaModeloSwing.PPaquete;
import metamodeloDatos.DClase;
import metamodeloDatos.DPaquete;
import metamodeloDiagramClass.*;
import metamodeloNegocio.Controlador;
import metamodeloNegocio.NPaquete;
import metamodeloRelacional.Column;
import metamodeloRelacional.ForeignKey;
import metamodeloRelacional.Schema;
import metamodeloRelacional.Table;
import org.jdom.JDOMException;
import transformacionPSMJava.GeneradorCodigoJava;
import transformacionPSMJava.GeneradorCodigoNegocio;
import transformacionPSMJava.GeneradorCodigoPresentacion;
import transformacionPSMJava.GestorTransformJava;
import transformacionPSMJava.GestorTransformNegocio;
import transformacionPSMJava.GestorTransformPresentacion;
import trasnformacionRelacional.GeneradorScript;
import trasnformacionRelacional.GestorTranformRelacional;

/**
 *
 * @author ELIO
 */
public class IUHerramientaMDA extends javax.swing.JFrame {

    /**
     * Creates new form IUHerramientaMDA
     */
    private ModeloClase mc;
    private Schema sch;
    private String nameDatabase;
    private DPaquete dpaquete;
    private NPaquete npaquete;
    private PPaquete ppaquete;

    public IUHerramientaMDA() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Modelos");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(jTree1);

        jMenu1.setText("File");

        jMenuItem1.setText("Abrir Modelo de Dominio");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Transformaciones");

        jMenuItem2.setText("TransformarToRelacional");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem4.setText("TransformarToModeloCapas");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Generacion");

        jMenuItem3.setText("GenerarScript");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem5.setText("GenerarCodigoJava");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(317, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        JFileChooser jc = new JFileChooser();
        jc.setFileFilter(new FileNameExtensionFilter("*.xmi", "xml", "XMI"));
        //jc.addChoosableFileFilter(new FileNameExtensionFilter("*.docx", "docx","DOCX"));
        int respuesta = jc.showOpenDialog(this);
        if (respuesta == JFileChooser.APPROVE_OPTION) {
            File archivoElegido = jc.getSelectedFile();
            gestionXMI.GestorXMI gxmi = new GestorXMI();
            try {
                mc = gxmi.importarDiagramaClases(archivoElegido.getAbsolutePath());
                jTree1.setModel(new DefaultTreeModel(new DefaultMutableTreeNode("Modelos")));
                Paquete p = mc.getPaquete();
                DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) jTree1.getModel().getRoot();
                DefaultTreeModel modelo = (DefaultTreeModel) jTree1.getModel();
                DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(p.getName());
                modelo.insertNodeInto(nodo, raiz, 0);

                DefaultMutableTreeNode nodo4 = new DefaultMutableTreeNode("clases");
                modelo.insertNodeInto(nodo4, nodo, 0);

                int cantidadClases = p.getCantidadClases();
                for (int i = 0; i < cantidadClases; i++) {
                    Clase c = p.getClase(i);
                    DefaultMutableTreeNode nodo2 = new DefaultMutableTreeNode(c.getName());
                    modelo.insertNodeInto(nodo2, nodo4, i);
                    int cantidadAtributos = c.getAtributos().size();
                    for (int j = 0; j < cantidadAtributos; j++) {
                        Atribute a = c.getAtributos().get(j);
                        DefaultMutableTreeNode nodo3 = new DefaultMutableTreeNode(a.getType().getName() + ": " + a.getName());
                        modelo.insertNodeInto(nodo3, nodo2, j);
                    }

                }
                DefaultMutableTreeNode nodo5 = new DefaultMutableTreeNode("Asociaciones");
                modelo.insertNodeInto(nodo5, nodo, 0);
                int cantidadAsociaciones = mc.getAsociaciones().size();
                for (int i = 0; i < cantidadAsociaciones; i++) {
                    Asociacion a = mc.getAsociaciones().get(i);
                    DefaultMutableTreeNode nodo6 = new DefaultMutableTreeNode(a.getNombre());
                    modelo.insertNodeInto(nodo6, nodo5, 0);
                    DefaultMutableTreeNode nodo7 = new DefaultMutableTreeNode("Origen");
                    modelo.insertNodeInto(nodo7, nodo6, 0);
                    DefaultMutableTreeNode nodo9 = new DefaultMutableTreeNode(a.getOrigen().getName());
                    modelo.insertNodeInto(nodo9, nodo7, 0);
                    DefaultMutableTreeNode nodo10 = new DefaultMutableTreeNode(a.getMultiplicidadOrigen());
                    modelo.insertNodeInto(nodo10, nodo7, 0);

                    DefaultMutableTreeNode nodo8 = new DefaultMutableTreeNode("Destino");
                    modelo.insertNodeInto(nodo8, nodo6, 0);
                    DefaultMutableTreeNode nodo11 = new DefaultMutableTreeNode(a.getDestino().getName());
                    modelo.insertNodeInto(nodo11, nodo8, 0);
                    DefaultMutableTreeNode nodo12 = new DefaultMutableTreeNode(a.getMultipliciadaDestino());
                    modelo.insertNodeInto(nodo12, nodo8, 0);

                }


                // String texto = gdoc.abrirDocumento(archivoElegido.getAbsolutePath());
            } catch (JDOMException ex) {
                JOptionPane.showMessageDialog(null, ex);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }


        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        if (mc == null) {
            JOptionPane.showMessageDialog(null, "PRIMERO DEBE LEER EL MODELO DE CLASES");
        } else {
            if (sch == null) {
                GestorTranformRelacional gtr = new GestorTranformRelacional();
                nameDatabase = JOptionPane.showInputDialog("Escribe el nombre de la base de datos:");
                if (nameDatabase != null) {
                    sch = gtr.transformar(mc, nameDatabase);
                    DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) jTree1.getModel().getRoot();
                    DefaultTreeModel modelo = (DefaultTreeModel) jTree1.getModel();
                    DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("DataBase");
                    modelo.insertNodeInto(nodo, raiz, raiz.getChildCount());
                    DefaultMutableTreeNode nodo7 = new DefaultMutableTreeNode("Nombre: " + sch.getName());
                    modelo.insertNodeInto(nodo7, nodo, 0);
                    DefaultMutableTreeNode nodo1 = new DefaultMutableTreeNode("Tablas");
                    modelo.insertNodeInto(nodo1, nodo, 1);
                    int cantidadTablas = sch.getTablas().size();
                    for (int i = 0; i < cantidadTablas; i++) {
                        Table t = sch.getTablas().get(i);
                        DefaultMutableTreeNode nodo2 = new DefaultMutableTreeNode(t.getName());
                        modelo.insertNodeInto(nodo2, nodo1, i);
                        DefaultMutableTreeNode nodo4 = new DefaultMutableTreeNode("Columnas");
                        modelo.insertNodeInto(nodo4, nodo2, 0);
                        int cantidadColumnas = t.getColumnas().size();
                        DefaultMutableTreeNode nodo44 = new DefaultMutableTreeNode(t.getPrimaryKey().getName() + ": " + t.getPrimaryKey().getType());
                        modelo.insertNodeInto(nodo44, nodo4, 0);
                        for (int j = 1; j <= cantidadColumnas; j++) {
                            Column c = t.getColumnas().get(j - 1);
                            DefaultMutableTreeNode nodo3 = new DefaultMutableTreeNode(c.getName() + ": " + c.getType());
                            modelo.insertNodeInto(nodo3, nodo4, j);
                        }
                        DefaultMutableTreeNode nodo5 = new DefaultMutableTreeNode("Columnas Foraneas");
                        modelo.insertNodeInto(nodo5, nodo2, 1);
                        int cantidadForaneas = t.getLlavesForanneas().size();
                        for (int j = 0; j < cantidadForaneas; j++) {
                            ForeignKey fk = t.getLlavesForanneas().get(j);
                            DefaultMutableTreeNode nodo6 = new DefaultMutableTreeNode(fk.getName() + ": " + fk.getColumnas().get(0).getType());
                            modelo.insertNodeInto(nodo6, nodo5, j);
                        }


                    }

                }
            }




        }

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        if (sch != null) {
            JFileChooser jc = new JFileChooser();

            //jc.addChoosableFileFilter(new FileNameExtensionFilter("*.docx", "docx","DOCX"));
            int respuesta = jc.showSaveDialog(this);
            if (respuesta == JFileChooser.APPROVE_OPTION) {

                File archivoElegido = jc.getSelectedFile();
                GeneradorScript gscript = new GeneradorScript();
                gscript.crearScript(sch, archivoElegido.getAbsolutePath());


            }

        } else {
            JOptionPane.showMessageDialog(null, "primero debe generar el modelo relacional");
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        GestorTransformJava gtj = new GestorTransformJava();
        dpaquete = gtj.transformar(mc);
        GestorTransformNegocio gtn = new GestorTransformNegocio();
        npaquete = gtn.transformar(dpaquete);
        GestorTransformPresentacion gtp = new GestorTransformPresentacion();
        ppaquete = gtp.transformar(dpaquete);
        
        DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) jTree1.getModel().getRoot();
                    DefaultTreeModel modelo = (DefaultTreeModel) jTree1.getModel();
                    DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Datos");
                    modelo.insertNodeInto(nodo, raiz, raiz.getChildCount());
        
        int cantidadClasesDatos=dpaquete.getClases().size();
        for (int i = 0; i < cantidadClasesDatos; i++) {
            DClase dc=dpaquete.getClases().get(i);
            DefaultMutableTreeNode nodo7 = new DefaultMutableTreeNode(dc.getName());
            modelo.insertNodeInto(nodo7, nodo, i);
        }
        DefaultMutableTreeNode nodo1 = new DefaultMutableTreeNode("Negocio");
                    modelo.insertNodeInto(nodo1, raiz, raiz.getChildCount());
        int cantidadClasesNegocio=npaquete.getControles().size();
        for (int i = 0; i < cantidadClasesNegocio; i++) {
            Controlador ctl=npaquete.getControles().get(i);
            DefaultMutableTreeNode nodo7 = new DefaultMutableTreeNode(ctl.getName());
            modelo.insertNodeInto(nodo7, nodo1, i);
        }
        
        DefaultMutableTreeNode nodo2 = new DefaultMutableTreeNode("Presentacion");
                    modelo.insertNodeInto(nodo2, raiz, raiz.getChildCount());
        int cantidadClasesFormularios=ppaquete.getFormularios().size();
        for (int i = 0; i < cantidadClasesFormularios; i++) {
            Formulario f=ppaquete.getFormularios().get(i);
            DefaultMutableTreeNode nodo7 = new DefaultMutableTreeNode(f.getName());
            modelo.insertNodeInto(nodo7, nodo2, i);
        }
        
        
        



    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        Configuracion c=new Configuracion(this,true);
        c.setVisible(true);
        System.out.println(c.direccion); 
        String path=c.direccion+"/";
        
        System.out.println(c.nombreDB);
        System.out.println(c.password);
        System.out.println(c.usuario);
        
        if (!c.nombreDB.equals("")&&!c.usuario.equals("")&&!path.equals("")&&dpaquete!=null) {
            GeneradorCodigoJava gcj=new GeneradorCodigoJava();
            gcj.generarCapaDatos(dpaquete, path, c.nombreDB, c.usuario, c.password);
                    GeneradorCodigoNegocio gcn=new GeneradorCodigoNegocio();
                    gcn.generarCapaNegocio(npaquete, path);
                    GeneradorCodigoPresentacion gcp= new GeneradorCodigoPresentacion();
                    gcp.generarCapaPresentacion(ppaquete, path);
        }
        
        
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IUHerramientaMDA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IUHerramientaMDA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IUHerramientaMDA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IUHerramientaMDA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IUHerramientaMDA().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
